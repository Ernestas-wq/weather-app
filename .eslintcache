[{"/mnt/c/Users/ern/Desktop/WeatherAppReact/weather-app/src/tilt.js":"1","/mnt/c/Users/ern/Desktop/WeatherAppReact/weather-app/src/Loading.js":"2","/mnt/c/Users/ern/Desktop/WeatherAppReact/weather-app/src/Pictures.js":"3","/mnt/c/Users/ern/Desktop/WeatherAppReact/weather-app/src/City.js":"4","/mnt/c/Users/ern/Desktop/WeatherAppReact/weather-app/src/App.js":"5","/mnt/c/Users/ern/Desktop/WeatherAppReact/weather-app/src/index.js":"6"},{"size":17288,"mtime":1611171004025,"results":"7","hashOfConfig":"8"},{"size":193,"mtime":1611168554134,"results":"9","hashOfConfig":"8"},{"size":2563,"mtime":1612421565883,"results":"10","hashOfConfig":"8"},{"size":4660,"mtime":1612421805167,"results":"11","hashOfConfig":"8"},{"size":140,"mtime":1612372185520,"results":"12","hashOfConfig":"8"},{"size":565,"mtime":1611149853084,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"16"},"1mvefjy",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/mnt/c/Users/ern/Desktop/WeatherAppReact/weather-app/src/tilt.js",["28","29","30"],"var VanillaTilt = (function () {\r\n  'use strict';\r\n\r\n  /**\r\n   * Created by Sergiu È˜andor (micku7zu) on 1/27/2017.\r\n   * Original idea: https://github.com/gijsroge/tilt.js\r\n   * MIT License.\r\n   * Version 1.7.0\r\n   */\r\n\r\n  class VanillaTilt {\r\n    constructor(element, settings = {}) {\r\n      if (!(element instanceof Node)) {\r\n        throw \"Can't initialize VanillaTilt because \" + element + ' is not a Node.';\r\n      }\r\n\r\n      this.width = null;\r\n      this.height = null;\r\n      this.clientWidth = null;\r\n      this.clientHeight = null;\r\n      this.left = null;\r\n      this.top = null;\r\n\r\n      // for Gyroscope sampling\r\n      this.gammazero = null;\r\n      this.betazero = null;\r\n      this.lastgammazero = null;\r\n      this.lastbetazero = null;\r\n\r\n      this.transitionTimeout = null;\r\n      this.updateCall = null;\r\n      this.event = null;\r\n\r\n      this.updateBind = this.update.bind(this);\r\n      this.resetBind = this.reset.bind(this);\r\n\r\n      this.element = element;\r\n      this.settings = this.extendSettings(settings);\r\n\r\n      this.reverse = this.settings.reverse ? -1 : 1;\r\n      this.glare = VanillaTilt.isSettingTrue(this.settings.glare);\r\n      this.glarePrerender = VanillaTilt.isSettingTrue(this.settings['glare-prerender']);\r\n      this.fullPageListening = VanillaTilt.isSettingTrue(this.settings['full-page-listening']);\r\n      this.gyroscope = VanillaTilt.isSettingTrue(this.settings.gyroscope);\r\n      this.gyroscopeSamples = this.settings.gyroscopeSamples;\r\n\r\n      this.elementListener = this.getElementListener();\r\n\r\n      if (this.glare) {\r\n        this.prepareGlare();\r\n      }\r\n\r\n      if (this.fullPageListening) {\r\n        this.updateClientSize();\r\n      }\r\n\r\n      this.addEventListeners();\r\n      this.updateInitialPosition();\r\n    }\r\n\r\n    static isSettingTrue(setting) {\r\n      return setting === '' || setting === true || setting === 1;\r\n    }\r\n\r\n    /**\r\n     * Method returns element what will be listen mouse events\r\n     * @return {Node}\r\n     */\r\n    getElementListener() {\r\n      if (this.fullPageListening) {\r\n        return window.document;\r\n      }\r\n\r\n      if (typeof this.settings['mouse-event-element'] === 'string') {\r\n        const mouseEventElement = document.querySelector(this.settings['mouse-event-element']);\r\n\r\n        if (mouseEventElement) {\r\n          return mouseEventElement;\r\n        }\r\n      }\r\n\r\n      if (this.settings['mouse-event-element'] instanceof Node) {\r\n        return this.settings['mouse-event-element'];\r\n      }\r\n\r\n      return this.element;\r\n    }\r\n\r\n    /**\r\n     * Method set listen methods for this.elementListener\r\n     * @return {Node}\r\n     */\r\n    addEventListeners() {\r\n      this.onMouseEnterBind = this.onMouseEnter.bind(this);\r\n      this.onMouseMoveBind = this.onMouseMove.bind(this);\r\n      this.onMouseLeaveBind = this.onMouseLeave.bind(this);\r\n      this.onWindowResizeBind = this.onWindowResize.bind(this);\r\n      this.onDeviceOrientationBind = this.onDeviceOrientation.bind(this);\r\n\r\n      this.elementListener.addEventListener('mouseenter', this.onMouseEnterBind);\r\n      this.elementListener.addEventListener('mouseleave', this.onMouseLeaveBind);\r\n      this.elementListener.addEventListener('mousemove', this.onMouseMoveBind);\r\n\r\n      if (this.glare || this.fullPageListening) {\r\n        window.addEventListener('resize', this.onWindowResizeBind);\r\n      }\r\n\r\n      if (this.gyroscope) {\r\n        window.addEventListener('deviceorientation', this.onDeviceOrientationBind);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Method remove event listeners from current this.elementListener\r\n     */\r\n    removeEventListeners() {\r\n      this.elementListener.removeEventListener('mouseenter', this.onMouseEnterBind);\r\n      this.elementListener.removeEventListener('mouseleave', this.onMouseLeaveBind);\r\n      this.elementListener.removeEventListener('mousemove', this.onMouseMoveBind);\r\n\r\n      if (this.gyroscope) {\r\n        window.removeEventListener('deviceorientation', this.onDeviceOrientationBind);\r\n      }\r\n\r\n      if (this.glare || this.fullPageListening) {\r\n        window.removeEventListener('resize', this.onWindowResizeBind);\r\n      }\r\n    }\r\n\r\n    destroy() {\r\n      clearTimeout(this.transitionTimeout);\r\n      if (this.updateCall !== null) {\r\n        cancelAnimationFrame(this.updateCall);\r\n      }\r\n\r\n      this.reset();\r\n\r\n      this.removeEventListeners();\r\n      this.element.vanillaTilt = null;\r\n      delete this.element.vanillaTilt;\r\n\r\n      this.element = null;\r\n    }\r\n\r\n    onDeviceOrientation(event) {\r\n      if (event.gamma === null || event.beta === null) {\r\n        return;\r\n      }\r\n\r\n      this.updateElementPosition();\r\n\r\n      if (this.gyroscopeSamples > 0) {\r\n        this.lastgammazero = this.gammazero;\r\n        this.lastbetazero = this.betazero;\r\n\r\n        if (this.gammazero === null) {\r\n          this.gammazero = event.gamma;\r\n          this.betazero = event.beta;\r\n        } else {\r\n          this.gammazero = (event.gamma + this.lastgammazero) / 2;\r\n          this.betazero = (event.beta + this.lastbetazero) / 2;\r\n        }\r\n\r\n        this.gyroscopeSamples -= 1;\r\n      }\r\n\r\n      const totalAngleX = this.settings.gyroscopeMaxAngleX - this.settings.gyroscopeMinAngleX;\r\n      const totalAngleY = this.settings.gyroscopeMaxAngleY - this.settings.gyroscopeMinAngleY;\r\n\r\n      const degreesPerPixelX = totalAngleX / this.width;\r\n      const degreesPerPixelY = totalAngleY / this.height;\r\n\r\n      const angleX = event.gamma - (this.settings.gyroscopeMinAngleX + this.gammazero);\r\n      const angleY = event.beta - (this.settings.gyroscopeMinAngleY + this.betazero);\r\n\r\n      const posX = angleX / degreesPerPixelX;\r\n      const posY = angleY / degreesPerPixelY;\r\n\r\n      if (this.updateCall !== null) {\r\n        cancelAnimationFrame(this.updateCall);\r\n      }\r\n\r\n      this.event = {\r\n        clientX: posX + this.left,\r\n        clientY: posY + this.top,\r\n      };\r\n\r\n      this.updateCall = requestAnimationFrame(this.updateBind);\r\n    }\r\n\r\n    onMouseEnter() {\r\n      this.updateElementPosition();\r\n      this.element.style.willChange = 'transform';\r\n      this.setTransition();\r\n    }\r\n\r\n    onMouseMove(event) {\r\n      if (this.updateCall !== null) {\r\n        cancelAnimationFrame(this.updateCall);\r\n      }\r\n\r\n      this.event = event;\r\n      this.updateCall = requestAnimationFrame(this.updateBind);\r\n    }\r\n\r\n    onMouseLeave() {\r\n      this.setTransition();\r\n\r\n      if (this.settings.reset) {\r\n        requestAnimationFrame(this.resetBind);\r\n      }\r\n    }\r\n\r\n    reset() {\r\n      this.event = {\r\n        clientX: this.left + this.width / 2,\r\n        clientY: this.top + this.height / 2,\r\n      };\r\n\r\n      if (this.element && this.element.style) {\r\n        this.element.style.transform =\r\n          `perspective(${this.settings.perspective}px) ` +\r\n          `rotateX(0deg) ` +\r\n          `rotateY(0deg) ` +\r\n          `scale3d(1, 1, 1)`;\r\n      }\r\n\r\n      this.resetGlare();\r\n    }\r\n\r\n    resetGlare() {\r\n      if (this.glare) {\r\n        this.glareElement.style.transform = 'rotate(180deg) translate(-50%, -50%)';\r\n        this.glareElement.style.opacity = '0';\r\n      }\r\n    }\r\n\r\n    updateInitialPosition() {\r\n      if (this.settings.startX === 0 && this.settings.startY === 0) {\r\n        return;\r\n      }\r\n\r\n      this.onMouseEnter();\r\n\r\n      if (this.fullPageListening) {\r\n        this.event = {\r\n          clientX:\r\n            ((this.settings.startX + this.settings.max) / (2 * this.settings.max)) *\r\n            this.clientWidth,\r\n          clientY:\r\n            ((this.settings.startY + this.settings.max) / (2 * this.settings.max)) *\r\n            this.clientHeight,\r\n        };\r\n      } else {\r\n        this.event = {\r\n          clientX:\r\n            this.left +\r\n            ((this.settings.startX + this.settings.max) / (2 * this.settings.max)) * this.width,\r\n          clientY:\r\n            this.top +\r\n            ((this.settings.startY + this.settings.max) / (2 * this.settings.max)) * this.height,\r\n        };\r\n      }\r\n\r\n      let backupScale = this.settings.scale;\r\n      this.settings.scale = 1;\r\n      this.update();\r\n      this.settings.scale = backupScale;\r\n      this.resetGlare();\r\n    }\r\n\r\n    getValues() {\r\n      let x, y;\r\n\r\n      if (this.fullPageListening) {\r\n        x = this.event.clientX / this.clientWidth;\r\n        y = this.event.clientY / this.clientHeight;\r\n      } else {\r\n        x = (this.event.clientX - this.left) / this.width;\r\n        y = (this.event.clientY - this.top) / this.height;\r\n      }\r\n\r\n      x = Math.min(Math.max(x, 0), 1);\r\n      y = Math.min(Math.max(y, 0), 1);\r\n\r\n      let tiltX = (this.reverse * (this.settings.max - x * this.settings.max * 2)).toFixed(2);\r\n      let tiltY = (this.reverse * (y * this.settings.max * 2 - this.settings.max)).toFixed(2);\r\n      let angle =\r\n        Math.atan2(\r\n          this.event.clientX - (this.left + this.width / 2),\r\n          -(this.event.clientY - (this.top + this.height / 2))\r\n        ) *\r\n        (180 / Math.PI);\r\n\r\n      return {\r\n        tiltX: tiltX,\r\n        tiltY: tiltY,\r\n        percentageX: x * 100,\r\n        percentageY: y * 100,\r\n        angle: angle,\r\n      };\r\n    }\r\n\r\n    updateElementPosition() {\r\n      let rect = this.element.getBoundingClientRect();\r\n\r\n      this.width = this.element.offsetWidth;\r\n      this.height = this.element.offsetHeight;\r\n      this.left = rect.left;\r\n      this.top = rect.top;\r\n    }\r\n\r\n    update() {\r\n      let values = this.getValues();\r\n\r\n      this.element.style.transform =\r\n        'perspective(' +\r\n        this.settings.perspective +\r\n        'px) ' +\r\n        'rotateX(' +\r\n        (this.settings.axis === 'x' ? 0 : values.tiltY) +\r\n        'deg) ' +\r\n        'rotateY(' +\r\n        (this.settings.axis === 'y' ? 0 : values.tiltX) +\r\n        'deg) ' +\r\n        'scale3d(' +\r\n        this.settings.scale +\r\n        ', ' +\r\n        this.settings.scale +\r\n        ', ' +\r\n        this.settings.scale +\r\n        ')';\r\n\r\n      if (this.glare) {\r\n        this.glareElement.style.transform = `rotate(${values.angle}deg) translate(-50%, -50%)`;\r\n        this.glareElement.style.opacity = `${\r\n          (values.percentageY * this.settings['max-glare']) / 100\r\n        }`;\r\n      }\r\n\r\n      this.element.dispatchEvent(\r\n        new CustomEvent('tiltChange', {\r\n          detail: values,\r\n        })\r\n      );\r\n\r\n      this.updateCall = null;\r\n    }\r\n\r\n    /**\r\n     * Appends the glare element (if glarePrerender equals false)\r\n     * and sets the default style\r\n     */\r\n    prepareGlare() {\r\n      // If option pre-render is enabled we assume all html/css is present for an optimal glare effect.\r\n      if (!this.glarePrerender) {\r\n        // Create glare element\r\n        const jsTiltGlare = document.createElement('div');\r\n        jsTiltGlare.classList.add('js-tilt-glare');\r\n\r\n        const jsTiltGlareInner = document.createElement('div');\r\n        jsTiltGlareInner.classList.add('js-tilt-glare-inner');\r\n\r\n        jsTiltGlare.appendChild(jsTiltGlareInner);\r\n        this.element.appendChild(jsTiltGlare);\r\n      }\r\n\r\n      this.glareElementWrapper = this.element.querySelector('.js-tilt-glare');\r\n      this.glareElement = this.element.querySelector('.js-tilt-glare-inner');\r\n\r\n      if (this.glarePrerender) {\r\n        return;\r\n      }\r\n\r\n      Object.assign(this.glareElementWrapper.style, {\r\n        position: 'absolute',\r\n        top: '0',\r\n        left: '0',\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n        'pointer-events': 'none',\r\n      });\r\n\r\n      Object.assign(this.glareElement.style, {\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        'pointer-events': 'none',\r\n        'background-image': `linear-gradient(0deg, rgba(255,255,255,0) 0%, rgba(255,255,255,1) 100%)`,\r\n        width: `${this.element.offsetWidth * 2}px`,\r\n        height: `${this.element.offsetWidth * 2}px`,\r\n        transform: 'rotate(180deg) translate(-50%, -50%)',\r\n        'transform-origin': '0% 0%',\r\n        opacity: '0',\r\n      });\r\n    }\r\n\r\n    updateGlareSize() {\r\n      if (this.glare) {\r\n        Object.assign(this.glareElement.style, {\r\n          width: `${this.element.offsetWidth * 2}`,\r\n          height: `${this.element.offsetWidth * 2}`,\r\n        });\r\n      }\r\n    }\r\n\r\n    updateClientSize() {\r\n      this.clientWidth =\r\n        window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\r\n\r\n      this.clientHeight =\r\n        window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\r\n    }\r\n\r\n    onWindowResize() {\r\n      this.updateGlareSize();\r\n      this.updateClientSize();\r\n    }\r\n\r\n    setTransition() {\r\n      clearTimeout(this.transitionTimeout);\r\n      this.element.style.transition = this.settings.speed + 'ms ' + this.settings.easing;\r\n      if (this.glare)\r\n        this.glareElement.style.transition = `opacity ${this.settings.speed}ms ${this.settings.easing}`;\r\n\r\n      this.transitionTimeout = setTimeout(() => {\r\n        this.element.style.transition = '';\r\n        if (this.glare) {\r\n          this.glareElement.style.transition = '';\r\n        }\r\n      }, this.settings.speed);\r\n    }\r\n\r\n    /**\r\n     * Method return patched settings of instance\r\n     * @param {boolean} settings.reverse - reverse the tilt direction\r\n     * @param {number} settings.max - max tilt rotation (degrees)\r\n     * @param {startX} settings.startX - the starting tilt on the X axis, in degrees. Default: 0\r\n     * @param {startY} settings.startY - the starting tilt on the Y axis, in degrees. Default: 0\r\n     * @param {number} settings.perspective - Transform perspective, the lower the more extreme the tilt gets\r\n     * @param {string} settings.easing - Easing on enter/exit\r\n     * @param {number} settings.scale - 2 = 200%, 1.5 = 150%, etc..\r\n     * @param {number} settings.speed - Speed of the enter/exit transition\r\n     * @param {boolean} settings.transition - Set a transition on enter/exit\r\n     * @param {string|null} settings.axis - What axis should be disabled. Can be X or Y\r\n     * @param {boolean} settings.glare - What axis should be disabled. Can be X or Y\r\n     * @param {number} settings.max-glare - the maximum \"glare\" opacity (1 = 100%, 0.5 = 50%)\r\n     * @param {boolean} settings.glare-prerender - false = VanillaTilt creates the glare elements for you, otherwise\r\n     * @param {boolean} settings.full-page-listening - If true, parallax effect will listen to mouse move events on the whole document, not only the selected element\r\n     * @param {string|object} settings.mouse-event-element - String selector or link to HTML-element what will be listen mouse events\r\n     * @param {boolean} settings.reset - false = If the tilt effect has to be reset on exit\r\n     * @param {gyroscope} settings.gyroscope - Enable tilting by deviceorientation events\r\n     * @param {gyroscopeSensitivity} settings.gyroscopeSensitivity - Between 0 and 1 - The angle at which max tilt position is reached. 1 = 90deg, 0.5 = 45deg, etc..\r\n     * @param {gyroscopeSamples} settings.gyroscopeSamples - How many gyroscope moves to decide the starting position.\r\n     */\r\n    extendSettings(settings) {\r\n      let defaultSettings = {\r\n        reverse: false,\r\n        max: 15,\r\n        startX: 0,\r\n        startY: 0,\r\n        perspective: 1000,\r\n        easing: 'cubic-bezier(.03,.98,.52,.99)',\r\n        scale: 1,\r\n        speed: 300,\r\n        transition: true,\r\n        axis: null,\r\n        glare: false,\r\n        'max-glare': 1,\r\n        'glare-prerender': false,\r\n        'full-page-listening': false,\r\n        'mouse-event-element': null,\r\n        reset: true,\r\n        gyroscope: true,\r\n        gyroscopeMinAngleX: -45,\r\n        gyroscopeMaxAngleX: 45,\r\n        gyroscopeMinAngleY: -45,\r\n        gyroscopeMaxAngleY: 45,\r\n        gyroscopeSamples: 10,\r\n      };\r\n\r\n      let newSettings = {};\r\n      for (var property in defaultSettings) {\r\n        if (property in settings) {\r\n          newSettings[property] = settings[property];\r\n        } else if (this.element.hasAttribute('data-tilt-' + property)) {\r\n          let attribute = this.element.getAttribute('data-tilt-' + property);\r\n          try {\r\n            newSettings[property] = JSON.parse(attribute);\r\n          } catch (e) {\r\n            newSettings[property] = attribute;\r\n          }\r\n        } else {\r\n          newSettings[property] = defaultSettings[property];\r\n        }\r\n      }\r\n\r\n      return newSettings;\r\n    }\r\n\r\n    static init(elements, settings) {\r\n      if (elements instanceof Node) {\r\n        elements = [elements];\r\n      }\r\n\r\n      if (elements instanceof NodeList) {\r\n        elements = [].slice.call(elements);\r\n      }\r\n\r\n      if (!(elements instanceof Array)) {\r\n        return;\r\n      }\r\n\r\n      elements.forEach(element => {\r\n        if (!('vanillaTilt' in element)) {\r\n          element.vanillaTilt = new VanillaTilt(element, settings);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  if (typeof document !== 'undefined') {\r\n    /* expose the class to window */\r\n    window.VanillaTilt = VanillaTilt;\r\n\r\n    /**\r\n     * Auto load\r\n     */\r\n    VanillaTilt.init(document.querySelectorAll('[data-tilt]'));\r\n  }\r\n\r\n  return VanillaTilt;\r\n})();\r\n\r\nexport default function () {\r\n  VanillaTilt.init(document.querySelectorAll('.cities__card'), {\r\n    max: 25,\r\n    speed: 400,\r\n  });\r\n}\r\n","/mnt/c/Users/ern/Desktop/WeatherAppReact/weather-app/src/Loading.js",[],"/mnt/c/Users/ern/Desktop/WeatherAppReact/weather-app/src/Pictures.js",["31","32","33"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport 'swiper/swiper-bundle.min.css';\r\nimport { Swiper, SwiperSlide } from 'swiper/react';\r\nimport SwiperCore, { EffectFade, Thumbs, Autoplay, Navigation, Pagination } from 'swiper';\r\nconst FLICKR_API_KEY = 'daad5c6194666cd0ee23c9e6b0d2d000';\r\n\r\nconst Pictures = ({ city, isSubmitted, setCity, cities }) => {\r\n  const [images, setImages] = useState([]);\r\n  const [thumbsSwiper, setThumbsSwiper] = useState();\r\n  SwiperCore.use([EffectFade, Autoplay, Navigation, Pagination]);\r\n  const fetchPictures = async value => {\r\n    const url = `https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${FLICKR_API_KEY}&tags=${value}&text=${\r\n      value + ' city'\r\n    }&safe_search=1&per_page=6&content_type=1&sort=relevance&format=json&nojsoncallback=1`;\r\n    const response = await fetch(url);\r\n    const result = await response.json();\r\n\r\n    const pics = result.photos.photo.map(pic => {\r\n      const { server, id, secret } = pic;\r\n      const src = `https://live.staticflickr.com/${server}/${id}_${secret}_c.jpg`;\r\n      return src;\r\n    });\r\n    setImages(pics);\r\n    setCity('');\r\n  };\r\n\r\n  if (isSubmitted) {\r\n    fetchPictures(city);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"images\">\r\n        {images.length > 0 && (\r\n          <>\r\n            <h2>And some pictures from {cities[cities.length - 1].name} for you to check!</h2>\r\n            <Swiper\r\n              id=\"main\"\r\n              thumbs={{ swiper: thumbsSwiper }}\r\n              tag=\"section\"\r\n              wrapperTag=\"ul\"\r\n              effect=\"fade\"\r\n              navigation\r\n              pagination\r\n              autoplay={{\r\n                delay: 3000,\r\n              }}\r\n              spaceBetween={0}\r\n              slidesPerView={1}\r\n              onInit={swiper => console.log('Swiper initialized!', swiper)}\r\n              onSlideChange={swiper => {\r\n                console.log('Slide index changed to: ', swiper.activeIndex);\r\n              }}\r\n              onReachEnd={() => console.log('Swiper end reached')}\r\n            >\r\n              {images.map((img, idx) => {\r\n                return (\r\n                  <SwiperSlide key={idx} tag=\"li\">\r\n                    <div\r\n                      className=\"image-container\"\r\n                      style={{ backgroundImage: `url(${img})` }}\r\n                    ></div>\r\n                  </SwiperSlide>\r\n                );\r\n              })}\r\n            </Swiper>\r\n          </>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Pictures;\r\n","/mnt/c/Users/ern/Desktop/WeatherAppReact/weather-app/src/City.js",["34"],"/mnt/c/Users/ern/Desktop/WeatherAppReact/weather-app/src/App.js",[],"/mnt/c/Users/ern/Desktop/WeatherAppReact/weather-app/src/index.js",[],{"ruleId":"35","severity":1,"message":"36","line":2,"column":3,"nodeType":"37","messageId":"38","endLine":2,"endColumn":16,"fix":"39"},{"ruleId":"40","severity":1,"message":"41","line":14,"column":9,"nodeType":"42","messageId":"43","endLine":14,"endColumn":85},{"ruleId":"44","severity":1,"message":"45","line":536,"column":1,"nodeType":"46","endLine":541,"endColumn":2},{"ruleId":"47","severity":1,"message":"48","line":1,"column":27,"nodeType":"49","messageId":"50","endLine":1,"endColumn":36},{"ruleId":"47","severity":1,"message":"51","line":5,"column":34,"nodeType":"49","messageId":"50","endLine":5,"endColumn":40},{"ruleId":"47","severity":1,"message":"52","line":10,"column":24,"nodeType":"49","messageId":"50","endLine":10,"endColumn":39},{"ruleId":"53","severity":1,"message":"54","line":82,"column":7,"nodeType":"55","endLine":82,"endColumn":40},"strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"56","text":"57"},"no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Thumbs' is defined but never used.","'setThumbsSwiper' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",[36,49],""]